const { deterministicPartitionKey } = require("./dpk");
const crypto = require("crypto");

describe("deterministicPartitionKey", () => {
  it("Returns the literal '0' when given no input", () => {
    const trivialKey = deterministicPartitionKey();
    expect(trivialKey).toBe("0");
  });


  it("Returns the partitionKey string when it is defined in the input event", () => {
    const event = {
      partitionKey: "test"
    };
    const partitionKey = deterministicPartitionKey(event);
    expect(partitionKey).toBe("test");
  }
  );

  it("Returns the partitionKey string generated by crypto hash algorithm when partitionKey not defined in the input event", () => {
    const event = {};
    const hashMock = {
      update: jest.fn().mockReturnThis(),
      digest: jest.fn().mockReturnValueOnce("test")
    }
    jest.spyOn(crypto, 'createHash').mockImplementationOnce(() => hashMock);

    const partitionKey = deterministicPartitionKey(event);
    expect(partitionKey).toBe("test");
  }
  );

  it("Returns the stringified version of the partitionKey when partitionKey defined in the input event and is not a string type", () => {
    const event = {
      partitionKey: 12234234545
    };
    const partitionKey = deterministicPartitionKey(event);
    expect(partitionKey).toBe("12234234545");
  }
  );

  it("Returns the partitionKey string generated by crypto hash algorithm when partitionKey defined in the input event and is a string type of length > 256", () => {
    const randomString = crypto.randomBytes(256).toString('hex');
    const event = {
      partitionKey: randomString
    };
    const hashMock = {
      update: jest.fn().mockReturnThis(),
      digest: jest.fn().mockReturnValueOnce("test")
    }
    jest.spyOn(crypto, 'createHash').mockImplementationOnce(() => hashMock);

    const partitionKey = deterministicPartitionKey(event);
    expect(partitionKey).toBe("test");
  });

});
